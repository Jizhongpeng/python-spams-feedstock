diff --git test_prox.py test_prox.py
index 2f1fc31..92e8bc6 100644
--- test_prox.py
+++ test_prox.py
@@ -162,7 +162,7 @@ def test_fistaFlat():
     param['loss'] = 'multi-logistic'
     print('\nFISTA + Multi-Class Logistic l1')
     nclasses = np.max(Y[:])+1
-    W0 = np.zeros((X.shape[1],nclasses * Y.shape[1]),dtype=myfloat,order="F")
+    W0 = np.zeros((X.shape[1],int(nclasses) * Y.shape[1]),dtype=myfloat,order="F")
     (W, optim_info) = Xtest1('spams','spams.fistaFlat(Y,X,W0,True,**param)',locals())
 
     print('mean loss: %f, mean relative duality_gap: %f, number of iterations: %f' %(np.mean(optim_info[0,:]),np.mean(optim_info[2,:]),np.mean(optim_info[3,:])))
@@ -226,7 +226,7 @@ def test_fistaFlat():
     param['loss'] = 'multi-logistic'
     param['regul'] = 'l1l2'
     nclasses = np.max(Y[:])+1
-    W0 = np.zeros((X.shape[1],nclasses * Y.shape[1]),dtype=myfloat,order="F")
+    W0 = np.zeros((X.shape[1],int(nclasses) * Y.shape[1]),dtype=myfloat,order="F")
     (W, optim_info) = Xtest1('spams','spams.fistaFlat(Y,X,W0,True,**param)',locals())
     print('mean loss: %f, mean relative duality_gap: %f, number of iterations: %f' %(np.mean(optim_info[0,:]),np.mean(optim_info[2,:]),np.mean(optim_info[3,:])))
 # can be used of course with other regularization functions, intercept,...
@@ -378,7 +378,7 @@ def test_fistaGraph():
     regul = 'graph'
     print('\nFISTA + Multi-Class Logistic + graph')
     nclasses = np.max(Y) + 1
-    W0 = np.zeros((X.shape[1],nclasses * Y.shape[1]),dtype=myfloat,order="F")
+    W0 = np.zeros((X.shape[1],int(nclasses) * Y.shape[1]),dtype=myfloat,order="F")
     tic = time.time()
     (W, optim_info) = spams.fistaGraph(
         Y,X,W0,graph,True,numThreads = num_threads,verbose = verbose,
@@ -436,7 +436,7 @@ def test_fistaGraph():
     loss = 'multi-logistic'
     regul = 'multi-task-graph'
     nclasses = np.max(Y) + 1
-    W0 = np.zeros((X.shape[1],nclasses * Y.shape[1]),dtype=myfloat,order="F")
+    W0 = np.zeros((X.shape[1],int(nclasses) * Y.shape[1]),dtype=myfloat,order="F")
     tic = time.time()
     (W, optim_info) = spams.fistaGraph(
         Y,X,W0,graph,True,numThreads = num_threads,verbose = verbose,
@@ -535,7 +535,7 @@ def test_fistaTree():
     param['regul'] = 'tree-l2'
     print('\nFISTA + Multi-Class Logistic + tree-l2')
     nclasses = np.max(Y[:])+1
-    W0 = np.zeros((X.shape[1],nclasses * Y.shape[1]),dtype=myfloat,order="F")
+    W0 = np.zeros((X.shape[1],int(nclasses) * Y.shape[1]),dtype=myfloat,order="F")
     (W, optim_info) = Xtest1('spams','spams.fistaTree(Y,X,W0,tree,True,**param)',locals())
     print('mean loss: %f, number of iterations: %f' %(np.mean(optim_info[0,:],0),np.mean(optim_info[3,:],0)))
 # can be used of course with other regularization functions, intercept,...
@@ -570,14 +570,14 @@ def test_fistaTree():
     param['loss'] = 'multi-logistic'
     param['regul'] = 'multi-task-tree'
     nclasses = np.max(Y[:])+1
-    W0 = np.zeros((X.shape[1],nclasses * Y.shape[1]),dtype=myfloat,order="F")
+    W0 = np.zeros((X.shape[1],int(nclasses) * Y.shape[1]),dtype=myfloat,order="F")
     (W, optim_info) = Xtest1('spams','spams.fistaTree(Y,X,W0,tree,True,**param)',locals())
     print('mean loss: %f, mean relative duality_gap: %f, number of iterations: %f' %(np.mean(optim_info[0,:],0),np.mean(optim_info[2,:]),np.mean(optim_info[3,:],0)))
 # can be used of course with other regularization functions, intercept,...
 
     print('\nFISTA + Multi-Class Logistic +multi-task-tree + sparse matrix')
     nclasses = np.max(Y[:])+1
-    W0 = np.zeros((X.shape[1],nclasses * Y.shape[1]),dtype=myfloat,order="F")
+    W0 = np.zeros((X.shape[1],int(nclasses) * Y.shape[1]),dtype=myfloat,order="F")
     X2 = ssp.csc_matrix(X)
     (W, optim_info) = Xtest1('spams','spams.fistaTree(Y,X2,W0,tree,True,**param)',locals())
     print('mean loss: %f, mean relative duality_gap: %f, number of iterations: %f' %(np.mean(optim_info[0,:],0),np.mean(optim_info[2,:]),np.mean(optim_info[3,:],0)))
